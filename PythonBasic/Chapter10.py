####################自带电池####################
#模块
#任何Python程序都可以作为模块导入
#导入模块时，会看到以及.pyc结尾的新的文件出现，这个文件是经过处理（编译）的，转换成了Python能够更加有效处理的文件
#使用“import 模块名”导入模块，之后利用“模块名.函数名”来调用

#模块用于定义
#模块可以保持自己的作用域，定义的所有类和函数以及赋值后的变量都成为了模块的特性
#为了让代码可重用，请将其模块化

#让模块可用
#1.将模块放置在正确位置,查看Python搜索路径
#import sys, pprint
#pprint.pprint(sys.path)

#2.告诉编译器去哪里找
#可以编辑sys.path，标准的方法是在PYTHONPATH环境变量中包含模块所在目录

#包
#包基本上就是另外一类的模块，可以包含其他模块；当模块存储在文件中时，包就是模块所在的目录
#为了让Python将其作为包对待，必须包含一个命名为__init__.py的文件（模块）
#如果将__init__.py文件作为普通模块导入的话，文件的内容就是包的内容
#使用语句 from 包 import 模块名 来导入包内的模块

#探究模块
#最直接的方式就是在Python解释器中研究它们，第一件事就是导入
#import copy 导入叫做copy的标准模块
#使用dir函数，查看对象的所有特性，使用列表推导式过滤魔法方法
import copy
print([n for n in dir(copy) if not n.startswith('_')])
#__all__变量
print(copy.__all__)
#定义了模块的共有接口（public interface）
#如果编写模块没有设置__all__，import *语句默认将会导入模块中所有不以下划线开头的全局名称
#用help获取帮助
#模块信息来自文档，使用__doc__可以查看，库参考（http://python.org/doc/lib）

#阅读源代码是学习Python最好的方式，检查__file__属性可以知道模块存放路径查看源代码

#sys模块，能够访问与Python解释器联系紧密的变量和函数
#os模块，提供了访问多个操作系统服务的功能
#fileinput模块，轻松遍历文本文件的所有行
#集合、堆和双端队列
#time模块，获取当前时间、操作时间和日期、从字符串读取时间以及格式化时间为字符串
#random模块，包括返回随机数的函数，其实产生的数字都是伪随机数，可以使用os模块的urandom函数
#shelve模块，简单的存储方案
#re模块，包含对正则表达式的支持，学习的关键在于每次学习一点，预先记住是没有必要的（http://amk.ca/python/howto/regex/）
    #通配符，‘.’点号可以匹配任何字符串（除换行符以外的任何单个字符）
    #对特殊字符进行转义，r'python\.org'或者'python\\.org'
    #字符集，可以匹配它所包括的任意字符，[a-zA-Z0-9]匹配任意大小写字母和数字，[^abc]匹配除a、b、c之外的字符
    #选择字符和子模式，'p(ython|erl)'匹配python或perl
    #可选项和重复子模式，子模式后加上问号就变成了可选项
        #(pattern)* 允许模式重复0次或多次
        #(pattern)+ 允许模式重复1次或多次
        #(pattern){m,n} 允许模式重复m到n次
    #字符串的开始和结尾，字符串结尾用美元符号（$）标识




